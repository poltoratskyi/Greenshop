// Prisma Client Config
generator client {
    // Prisma Client -> JavaScript | TypeScript
    provider = "prisma-client-js"
}

// Database Connection Config
datasource db {
    // Data Type -> PostgreSQL
    provider = "postgresql"

    // url - Multi Connection (Recommended) 
    // directUrl - Single Connection (Not Recommended)

    // Url link -> Database
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Category {
    // id = Int (Num)
    // @id (Original)
    // @default(autoincrement()) - Adding an id and auto incr ut by +1 
    id Int @id @default(autoincrement())

    // Name of Category is Original 
    name String @unique

    // One to many (One category -> Many items)
    items Item[]

    // User Created 
    createdAt DateTime @default(now())
    // User was Updated
    updatedAt DateTime @updatedAt
}

model Item {
    id Int @id @default(autoincrement())

    imgUrl              String
    name                String
    shortDescription    String
    extendedDescription String
    tags                String
    sku                 String

    variations Variation[]
    items CartItem[]

    // category -> JavaScript | TypeScript
    // Find the categoryId "fields: [categoryId]" in the db and look for it "references: [id]" in the Category model
    category   Category @relation(fields: [categoryId], references: [id])
    // Id -> db
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Size {
    id   Int    @id @default(autoincrement())

    shortName String @unique
    fullName  String @unique

    variations Variation[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Variation {
    id        Int     @id @default(autoincrement())

    price     Int
    sale      Int
    value     Int
    onSale    Boolean

    cartItems CartItem[]

    size   Size @relation(fields: [sizeId], references: [id])
    sizeId Int

    item   Item @relation(fields: [itemId], references: [id])
    itemId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id Int @id @default(autoincrement())

    role     UserRole @default(USER)
    fullName String
    email    String   @unique
    password String


    verificationCode VerificationCode?
    cart   Cart?
    orders Order[]

    // Google | Facebook Authorization
    provider   String?
    // Id -> Google | Facebook
    providerId String?

    verified         DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String @unique

    createdAt DateTime @default(now())
}

model Cart {
    id Int @id @default(autoincrement())

    subTotalAmount Int @default(0)
    totalAmount Int    @default(0)
    token       String @unique

    items CartItem[]

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id      Int    @id @default(autoincrement())

    quantity Int   @default(1)

    cart     Cart  @relation(fields: [cartId], references: [id])
    cartId   Int 

    variation Variation @relation(fields: [variationId], references: [id])
    variationId Int

    item     Item  @relation(fields: [itemId], references: [id])
    itemId   Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    // Ckeckout
    firstName String
    lastName  String
    city      String
    email     String
    phone     String
    address   String
    zip       String?
    country   String
    notes     String?
    
    token     String

    // List of Items in the Cart   
    items Json

    // Registered ?
    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    order OrderItem[]

    status    OrderStatus
    // Id Payment Service
    paymentId  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrderItem {
    id       Int    @id @default(autoincrement())

    order    Order  @relation(fields: [orderId], references: [id])

    orderId  Int
    itemId   Int    
    quantity Int
    price    Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UserRole {
    USER
    ADMIN
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
    FAILED       
}
